
Функция ПолучитьДанныеВФорматеJSON(Сервер, АдресСтраницы)
	
	Результат = Новый Структура("Успех, ТекстОшибки, ДанныеJSON", Ложь, "Неизвестная ошибка", Неопределено);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	HTTPСоединение = Новый HTTPСоединение(Сервер);
	HTTPЗапрос = Новый HTTPЗапрос(АдресСтраницы);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяВременногоФайла);
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Результат.Успех = Ложь;
		Результат.ТекстОшибки = "Сервер " + Сервер + " вернул код ошибки " + HTTPОтвет.КодСостояния + " (адрес страницы = " + АдресСтраницы + ")";
		Возврат Результат;
	КонецЕсли; 
	
	Данные = Новый Структура; 
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	УдалитьФайлы(ИмяВременногоФайла);

	Результат.Успех = Истина;
	Результат.ТекстОшибки = "Нет ошибок";
	Результат.ДанныеJSON = ДанныеJSON;

	Возврат Результат;
	
КонецФункции

Функция СформироватьТаблицуПоДаннымJSON(ДанныеJSON, ИмяТаблицыJSON, СоответствиеПолей)
	
	ТаблицаРезультат = Новый Массив; 
	
	Для Каждого ТекРаздел Из ДанныеJSON Цикл
		Если ТекРаздел.Получить(ИмяТаблицыJSON) <> Неопределено Тогда
			Для Каждого СтрокаТаблицы Из ТекРаздел[ИмяТаблицыJSON] Цикл
				ДанныеСтрокиРезультата = Новый Структура; 
				Для Каждого КлючИЗначение Из СоответствиеПолей Цикл
					ИмяПоляJSON = КлючИЗначение.Ключ;
					ИмяПоляРезультата = КлючИЗначение.Значение;
					ТипПоляРезультата = "";
					Если Лев(ИмяПоляРезультата, 1) = "[" Тогда
						// имя поля содержит префикс с указанием типа (например, "[date]ДатаПогашения"
						Поз = Найти(ИмяПоляРезультата, "]");
						ТипПоляРезультата = Сред(ИмяПоляРезультата, 2, Поз-2);
						ИмяПоляРезультата = Сред(ИмяПоляРезультата, Поз+1);
					КонецЕсли; 
					ЗначениеJSON = СтрокаТаблицы[ИмяПоляJSON];
					ЗначениеПоляРезультата = ЗначениеИзJSON(ЗначениеJSON, ТипПоляРезультата);
					ДанныеСтрокиРезультата.Вставить(ИмяПоляРезультата, ЗначениеПоляРезультата);
				КонецЦикла; 
				ТаблицаРезультат.Добавить(ДанныеСтрокиРезультата);
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ЗначениеИзJSON(ЗначениеJSON, ТипJSON)
	
	Результат = ЗначениеJSON;
	
	Если ЗначениеJSON = Неопределено Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Если ТипJSON = "date" Тогда
		Если ЗначениеJSON = "0000-00-00" Тогда
			Результат = Дата(1, 1, 1);
		Иначе
			Результат = ПрочитатьДатуJSON(СтрЗаменить(СокрЛП(ЗначениеJSON), " ", "T"), ФорматДатыJSON.ISO);
		КонецЕсли; 
	ИначеЕсли ТипJSON = "number" Тогда 
		Результат = Число(ЗначениеJSON);
	ИначеЕсли ТипJSON = "boolean" Тогда 
		Результат = (Число(ЗначениеJSON) <> 0);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьОбщиеСведенияОбОблигацииПоДаннымJSON(СведенияОбОблигации, ДанныеJSON)
	
	// description
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("SECID"				, "Код");
	СоответствиеПолей.Вставить("SHORTNAME"			, "Наименование");	
	СоответствиеПолей.Вставить("NAME"				, "НаименованиеПолное");
	СоответствиеПолей.Вставить("REGNUMBER"			, "НомерГосРегистрации");
	СоответствиеПолей.Вставить("ISIN"				, "ISIN");
	СоответствиеПолей.Вставить("ISSUEDATE"			, "ДатаНачалаТоргов");
	СоответствиеПолей.Вставить("MATDATE"			, "ДатаПогашения");
	СоответствиеПолей.Вставить("INITIALFACEVALUE"	, "ПервоначальнаяНоминальнаяСтоимость");
	СоответствиеПолей.Вставить("FACEUNIT"			, "ВалютаНоминала");
	СоответствиеПолей.Вставить("LISTLEVEL"			, "УровеньЛистинга");
	СоответствиеПолей.Вставить("DAYSTOREDEMPTION"	, "ДнейДоПогашения");
	СоответствиеПолей.Вставить("ISSUESIZE"			, "ОбъемВыпуска");
	СоответствиеПолей.Вставить("FACEVALUE"			, "НоминальнаяСтоимость");
	СоответствиеПолей.Вставить("ISQUALIFIEDINVESTORS", "ДляКвалифицированныхИнвесторов");
	СоответствиеПолей.Вставить("COUPONFREQUENCY"	, "ПериодичностьВыплатыКупона");
	СоответствиеПолей.Вставить("COUPONDATE"			, "ДатаВыплатыКупона");
	СоответствиеПолей.Вставить("COUPONPERCENT"		, "СтавкаКупона");
	СоответствиеПолей.Вставить("COUPONVALUE"		, "СуммаКупона");
	СоответствиеПолей.Вставить("TYPENAME"			, "КатегорияЦеннойБумаги");
	СоответствиеПолей.Вставить("GROUP"				, "КодТипаИнструмента");
	СоответствиеПолей.Вставить("TYPE"				, "ТипБумаги");
	СоответствиеПолей.Вставить("GROUPNAME"			, "НаименованиеТипаИнструмента");
	СоответствиеПолей.Вставить("EMITTER_ID"			, "КодЭмитента");
	
	Для Каждого ТекРаздел Из ДанныеJSON Цикл
		Если ТекРаздел.Получить("description") <> Неопределено Тогда
			Для Каждого СтрокаТаблицыJSON Из ТекРаздел["description"] Цикл
				ИмяПоляJSON = СтрокаТаблицыJSON["name"];
				ИмяПоляРезультата = СоответствиеПолей.Получить(ИмяПоляJSON);
				Если ИмяПоляРезультата = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ЗначениеПоляРезультата = ЗначениеИзJSON(СтрокаТаблицыJSON["value"], СтрокаТаблицыJSON["type"]);
				СведенияОбОблигации.Вставить(ИмяПоляРезультата, ЗначениеПоляРезультата);
			КонецЦикла; 
		КонецЕсли;
		Если ТекРаздел.Получить("boards") <> Неопределено Тогда
			Для Каждого СтрокаТаблицыJSON Из ТекРаздел["boards"] Цикл
				Если СтрокаТаблицыJSON["is_primary"] = 1 Тогда
					СведенияОбОблигации.Вставить("ИдентификаторРежимаТоргов", СтрокаТаблицыJSON["boardid"]);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьСведенияОбОблигацииССайтаМосбиржи(КодБумаги) Экспорт
	
	//Общая информация:
	//XML  : https://iss.moex.com/iss/securities/RU000A0JU8R1.xml?iss.meta=off&lang=ru
	//JSON : https://iss.moex.com/iss/securities/RU000A0JU8R1.json?iss.meta=off&lang=ru&iss.json=extended
	
	//Купоны:
	//XML  : https://iss.moex.com/iss/securities/RU000A0JU8R1/bondization.xml?iss.meta=off&iss.only=coupons&lang=ru&limit=unlimited
	//JSON : https://iss.moex.com/iss/securities/RU000A0JU8R1/bondization.json?iss.meta=off&iss.only=coupons&lang=ru&limit=unlimited&iss.json=extended
	
	//Погашения:
	//XML  : https://iss.moex.com/iss/securities/RU000A0JU8R1/bondization.xml?iss.meta=off&iss.only=amortizations&lang=ru&limit=unlimited
	//JSON : https://iss.moex.com/iss/securities/RU000A0JU8R1/bondization.json?iss.meta=off&iss.only=amortizations&lang=ru&limit=unlimited&iss.json=extended
	
	СведенияОбОблигации = Новый Структура; 
	Сервер = "iss.moex.com";
	
	//Общая информация:
	АдресСтраницы = "/iss/securities/" + КодБумаги + ".json?iss.meta=off&lang=ru&iss.json=extended";
	РезультатЗапроса = ПолучитьДанныеВФорматеJSON(Сервер, АдресСтраницы);
	Если НЕ РезультатЗапроса.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения общей информации по бумаге " + КодБумаги + ": " + РезультатЗапроса.ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьОбщиеСведенияОбОблигацииПоДаннымJSON(СведенияОбОблигации, РезультатЗапроса.ДанныеJSON);
	Если СведенияОбОблигации.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения общей информации по бумаге " + КодБумаги + ": не удалось получить/обработать данные!");
		Возврат Неопределено;
	КонецЕсли; 
	
	// Купоны:
	АдресСтраницы = "/iss/securities/" + КодБумаги + "/bondization.json?iss.meta=off&iss.only=coupons&lang=ru&limit=unlimited&iss.json=extended";
	РезультатЗапроса = ПолучитьДанныеВФорматеJSON(Сервер, АдресСтраницы);
	Если НЕ РезультатЗапроса.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения информации о купонах по бумаге " + КодБумаги + ": " + РезультатЗапроса.ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("coupondate"	, "[date]ДатаВыплаты");
	СоответствиеПолей.Вставить("startdate"	, "[date]ДатаНачалаПериода");
	СоответствиеПолей.Вставить("value"		, "Сумма");
	СоответствиеПолей.Вставить("valueprc"	, "Ставка");
	СоответствиеПолей.Вставить("value_rub"	, "СуммаРуб");
	ТаблицаДанных = СформироватьТаблицуПоДаннымJSON(РезультатЗапроса.ДанныеJSON, "coupons", СоответствиеПолей);
	СведенияОбОблигации.Вставить("Купоны", ТаблицаДанных);
	
	// Погашения:
	АдресСтраницы = "/iss/securities/" + КодБумаги + "/bondization.json?iss.meta=off&iss.only=amortizations&lang=ru&limit=unlimited&iss.json=extended";
	РезультатЗапроса = ПолучитьДанныеВФорматеJSON(Сервер, АдресСтраницы);
	Если НЕ РезультатЗапроса.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения информации о купонах по бумаге " + КодБумаги + ": " + РезультатЗапроса.ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("amortdate"	, "[date]ДатаПогашения");
	СоответствиеПолей.Вставить("value"		, "Сумма");
	СоответствиеПолей.Вставить("value_rub"	, "СуммаРуб");
	ТаблицаДанных = СформироватьТаблицуПоДаннымJSON(РезультатЗапроса.ДанныеJSON, "amortizations", СоответствиеПолей);
	СведенияОбОблигации.Вставить("Погашения", ТаблицаДанных);
	
	// категория: офз, цб, муниципальная и тп
	Категория = Неопределено;
	Если СведенияОбОблигации.Свойство("ТипБумаги") Тогда
		СоответствиеКатегорий = Новый Соответствие;
		СоответствиеКатегорий.Вставить("ofz_bond"		, ПредопределенноеЗначение("Перечисление.КатегорииОблигаций.ОФЗ"));
		СоответствиеКатегорий.Вставить("cb_bond"		, ПредопределенноеЗначение("Перечисление.КатегорииОблигаций.ЦБ"));
		СоответствиеКатегорий.Вставить("subfederal_bond", ПредопределенноеЗначение("Перечисление.КатегорииОблигаций.Региональная"));
		СоответствиеКатегорий.Вставить("municipal_bond"	, ПредопределенноеЗначение("Перечисление.КатегорииОблигаций.Муниципальная"));
		СоответствиеКатегорий.Вставить("exchange_bond"	, ПредопределенноеЗначение("Перечисление.КатегорииОблигаций.Биржевая"));
		СоответствиеКатегорий.Вставить("corporate_bond"	, ПредопределенноеЗначение("Перечисление.КатегорииОблигаций.Корпоративная"));
		Категория = СоответствиеКатегорий.Получить(СведенияОбОблигации.ТипБумаги);		
	КонецЕсли; 
	СведенияОбОблигации.Вставить("Категория", Категория);	
	
	// Налогообложение:
	СтавкиНалога = ОбщегоНазначенияКлиентСервер.ПолучитьСтавкиНалога(СведенияОбОблигации);
	СведенияОбОблигации.Вставить("СтавкаНалогаНаКупонныйДоход", СтавкиНалога.СтавкаНалогаНаКупонныйДоход);
	СведенияОбОблигации.Вставить("СтавкаНалогаНаПриростКапитала", СтавкиНалога.СтавкаНалогаНаПриростКапитала);
	
	Возврат СведенияОбОблигации; 
	
КонецФункции

Функция ПолучитьИсториюТорговПоОблигации(КодБумаги, ИдРежимаТоргов, Дата1, Дата2, ПереченьКолонок = "") Экспорт
	
	// /iss/history/engines/[engine]/markets/[market]/boards/[board]/securities/[security]
	// (https://iss.moex.com/iss/reference/65)
	// TQCB(example):
	// http://iss.moex.com/iss/history/engines/stock/markets/bonds/boards/TQCB/securities/RU000A0JVV49.json?from=2020-08-01&till=2020-08-31&iss.meta=off&iss.json=extended
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("SECID"					, "КодБумаги");
	СоответствиеПолей.Вставить("TRADEDATE"				, "[date]ДатаТоргов");
	СоответствиеПолей.Вставить("NUMTRADES"				, "КоличествоСделок");
	СоответствиеПолей.Вставить("VOLUME"					, "ОбъемШт");
	СоответствиеПолей.Вставить("VALUE"					, "Объем");
	СоответствиеПолей.Вставить("OPEN"					, "Открытие");
	СоответствиеПолей.Вставить("LOW"					, "Минимум");
	СоответствиеПолей.Вставить("HIGH"					, "Максимум");
	СоответствиеПолей.Вставить("CLOSE"					, "Последняя");
	СоответствиеПолей.Вставить("WAPRICE"				, "Средневзвешенная");
	СоответствиеПолей.Вставить("LEGALCLOSEPRICE"		, "Закрытие");
	СоответствиеПолей.Вставить("LASTTRADEDATE"			, "[date]ДатаПоследнейСделки");
	
	Сервер = "iss.moex.com";
	АдресСтраницы = "/iss/history/engines/stock/markets/bonds/boards/[ИдРежимаТоргов]/securities/[КодБумаги].json";
	АдресСтраницы = АдресСтраницы + "?from=[Дата1]&till=[Дата2]";
	АдресСтраницы = АдресСтраницы + "&iss.meta=off"; // отключаем вывод мета-информации
	АдресСтраницы = АдресСтраницы + "&iss.json=extended"; // используем расширенный формат json
	Если НЕ ПустаяСтрока(ПереченьКолонок) Тогда
		АдресСтраницы = АдресСтраницы + "&history.columns=[ПереченьКолонок]"; // выводим только нужные нам колонки
	КонецЕсли; 
	
	Замены = Новый Соответствие;
	Замены.Вставить("ИдРежимаТоргов", ИдРежимаТоргов);
	Замены.Вставить("КодБумаги", КодБумаги);
	Замены.Вставить("ПереченьКолонок", ПереченьКолонок);
	Замены.Вставить("Дата1", Формат(Дата1, "ДФ=yyyy-MM-dd"));
	Замены.Вставить("Дата2", Формат(Дата2, "ДФ=yyyy-MM-dd"));
	
	Для Каждого КлючИЗначение Из Замены Цикл
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "[" + КлючИЗначение.Ключ + "]", КлючИЗначение.Значение);
	КонецЦикла; 
	
	Результат = Новый Массив; 
	
	ЕстьСледующаяПорцияДанных = Истина;
	Старт = 0;
	Пока ЕстьСледующаяПорцияДанных Цикл
		
		ТекАдресСтраницы = АдресСтраницы + ?(Старт > 0, "&start=" + Формат(Старт, "ЧГ="), "");
		РезультатЗапроса = ПолучитьДанныеВФорматеJSON(Сервер, ТекАдресСтраницы);
		Если НЕ РезультатЗапроса.Успех Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения истории торгов по бумаге " + КодБумаги + ": " + РезультатЗапроса.ТекстОшибки);
			Возврат Результат;
		КонецЕсли;
		
		ТаблицаДанных = СформироватьТаблицуПоДаннымJSON(РезультатЗапроса.ДанныеJSON, "history", СоответствиеПолей);
		
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			Результат.Добавить(СтрокаТаблицы);
		КонецЦикла; 
		
		КолвоПрочитано = ТаблицаДанных.Количество();
		
		ЕстьСледующаяПорцияДанных = (КолвоПрочитано > 0);
		Старт = Старт + КолвоПрочитано;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСправочникРежимовТоргов() Экспорт
	
	// /iss/engines/[engine]/markets/[market]/boards
	// (https://iss.moex.com/iss/reference/43)
	// (example):
	// https://iss.moex.com/iss/engines/stock/markets/bonds/boards.json?iss.meta=off&lang=ru&iss.json=extended
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("boardid"	, "ИдентификаторРежимаТоргов");
	СоответствиеПолей.Вставить("title"		, "Наименование");
	СоответствиеПолей.Вставить("is_traded"	, "[boolean]Торгуется");
	
	Сервер = "iss.moex.com";
	АдресСтраницы = "/iss/engines/stock/markets/bonds/boards.json?iss.meta=off&lang=ru&iss.json=extended";
	
	РезультатЗапроса = ПолучитьДанныеВФорматеJSON(Сервер, АдресСтраницы);
	Если НЕ РезультатЗапроса.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения справочника режимов торгов: " + РезультатЗапроса.ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
		
	ТаблицаДанных = СформироватьТаблицуПоДаннымJSON(РезультатЗапроса.ДанныеJSON, "boards", СоответствиеПолей);

	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьТаблицуИнструментовПоРежимуТоргов(ИдРежимаТоргов) Экспорт
	
	// /iss/engines/[engine]/markets/[market]/boards/[board]/securities
	// (https://iss.moex.com/iss/reference/32)
	// TQCB(example):
	// https://iss.moex.com/iss/engines/stock/markets/bonds/boards/TQCB/securities.json?iss.meta=off&lang=ru&iss.json=extended
	
	ОписаниеТаблиц = Новый Соответствие; 
	
	// securities
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("SECID"					, "КодБумаги");
	СоответствиеПолей.Вставить("SHORTNAME"				, "Наименование");
	СоответствиеПолей.Вставить("SECNAME"				, "НаименованиеПолное");
	СоответствиеПолей.Вставить("REGNUMBER"				, "НомерГосРегистрации");
	СоответствиеПолей.Вставить("ISIN"					, "ISIN");
	СоответствиеПолей.Вставить("MATDATE"				, "[date]ДатаПогашения");
	СоответствиеПолей.Вставить("FACEVALUE"				, "НоминальнаяСтоимость");
	СоответствиеПолей.Вставить("FACEUNIT"				, "ВалютаНоминала");
	СоответствиеПолей.Вставить("LISTLEVEL"				, "УровеньЛистинга");
	СоответствиеПолей.Вставить("ISSUESIZE"				, "ОбъемВыпуска");
	СоответствиеПолей.Вставить("COUPONPERIOD"			, "ДлительностьКупона");
	СоответствиеПолей.Вставить("NEXTCOUPON"				, "[date]ДатаВыплатыКупона");
	СоответствиеПолей.Вставить("COUPONPERCENT"			, "СтавкаКупона");
	СоответствиеПолей.Вставить("COUPONVALUE"			, "СуммаКупона");
	СоответствиеПолей.Вставить("ACCRUEDINT"				, "НКД");
	СоответствиеПолей.Вставить("BUYBACKPRICE"			, "ЦенаОферты");
	СоответствиеПолей.Вставить("OFFERDATE"				, "[date]ДатаОферты");
	СоответствиеПолей.Вставить("LOTSIZE"				, "РазмерЛота");
	СоответствиеПолей.Вставить("BOARDID"				, "ИдентификаторРежимаТоргов");
	ОписаниеТаблиц.Вставить("securities", СоответствиеПолей);
	
	// marketdata
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("SECID"					, "КодБумаги");
	СоответствиеПолей.Вставить("NUMTRADES"				, "КоличествоСделок");
	СоответствиеПолей.Вставить("VALTODAY"				, "Объем");
	СоответствиеПолей.Вставить("OPEN"					, "Открытие");
	СоответствиеПолей.Вставить("LOW"					, "Минимум");
	СоответствиеПолей.Вставить("HIGH"					, "Максимум");
	СоответствиеПолей.Вставить("LAST"					, "Последняя");
	СоответствиеПолей.Вставить("WAPRICE"				, "Средневзвешенная");
	СоответствиеПолей.Вставить("CLOSEPRICE"				, "Закрытие");
	СоответствиеПолей.Вставить("VOLTODAY"				, "ОбъемШт");
	СоответствиеПолей.Вставить("DURATION"				, "Дюрация");
	СоответствиеПолей.Вставить("YIELD"					, "ДоходностьПоПоследнейСделке");
	СоответствиеПолей.Вставить("YIELDATWAPRICE"			, "ДоходностьПоСредневзвешеннойЦене");
	СоответствиеПолей.Вставить("YIELDTOOFFER"			, "ДоходностьКОферте");
	СоответствиеПолей.Вставить("YIELDLASTCOUPON"		, "ДоходностьДляПоследнегоКупона");
	СоответствиеПолей.Вставить("CHANGE"					, "ИзменениеЦены");
	ОписаниеТаблиц.Вставить("marketdata", СоответствиеПолей);
		
	// marketdata
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("SECID"					, "КодБумаги");
	СоответствиеПолей.Вставить("PRICE"					, "ЦенаДляРасчетаДоходности");
	СоответствиеПолей.Вставить("YIELDDATE"				, "[date]ДатаДляРасчетаДоходности");
	СоответствиеПолей.Вставить("EFFECTIVEYIELD"			, "ЭффективнаяДоходность");
	СоответствиеПолей.Вставить("EFFECTIVEYIELDWAPRICE"	, "ЭффективнаяДоходностьПоСредневзвешеннойЦене");
	СоответствиеПолей.Вставить("TRADEMOMENT"			, "[date]ВремяПоследней");
	ОписаниеТаблиц.Вставить("marketdata_yields", СоответствиеПолей);
		
	
	Сервер = "iss.moex.com";
	АдресСтраницы = "/iss/engines/stock/markets/bonds/boards/" + ИдРежимаТоргов + "/securities.json?iss.meta=off&lang=ru&iss.json=extended";
	
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ДЕБАГ!!!");
	//АдресСтраницы = АдресСтраницы + "&first=10";

	НакопительДанных = Новый Соответствие;
	
	РезультатЗапроса = ПолучитьДанныеВФорматеJSON(Сервер, АдресСтраницы);
	Если НЕ РезультатЗапроса.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения таблицы инструментов по режиму торгов " + ИдРежимаТоргов + ": " + РезультатЗапроса.ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого КИЗ_ОписаниеТаблиц Из ОписаниеТаблиц Цикл
		ИмяТаблицы = КИЗ_ОписаниеТаблиц.Ключ;
		СоответствиеПолей = КИЗ_ОписаниеТаблиц.Значение;
		
		ТаблицаДанных = СформироватьТаблицуПоДаннымJSON(РезультатЗапроса.ДанныеJSON, ИмяТаблицы, СоответствиеПолей);
		
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			КлючДанных = СтрокаТаблицы.КодБумаги;
			СтрокаДанных = НакопительДанных.Получить(КлючДанных);
			Если СтрокаДанных = Неопределено Тогда
				НакопительДанных.Вставить(КлючДанных, СтрокаТаблицы);
			Иначе 
				Для Каждого КлючИЗначение Из СтрокаТаблицы Цикл
					СтрокаДанных.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
				НакопительДанных.Вставить(КлючДанных, СтрокаДанных);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла;
	
	Результат = Новый Массив; 
	
	Для Каждого КлючИЗначение Из НакопительДанных Цикл
		Результат.Добавить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции