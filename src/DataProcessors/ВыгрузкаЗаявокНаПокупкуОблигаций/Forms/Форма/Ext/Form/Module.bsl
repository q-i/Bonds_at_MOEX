
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// значения по умолчанию
	ПовышеннаяДлительностьДней = 365; // 1 год
	ДатаЗаявок = ТекущаяДатаСеанса();
	ТоргиВРежимеТПлюс = 1; // Т+1
	КомиссияБрокераПроцент = 0.06; // %
	КолвоДнейДляАнализаТоргов = 3;
	НачЗначTransID = День(ДатаЗаявок) * 1000 + 1;
	СуммаЛимитНаОднуБумагу = 5000;
	ОтступПроц = 0.1;
	ЗащитныйСпрэдПроц = 0.1;
	//СрокДействияЗаявки = КонецМесяца(ДатаЗаявок);
	ВидЗаявки = "Лимитированная";
	Для Каждого Категория Из Перечисления.КатегорииОблигаций Цикл
		НоваяСтрока = ПлановыеДоходности.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.ПлановаяДоходность = 5; // %
	КонецЦикла; 
		
	// {{ условное оформление
	// №1
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ГруппаОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаОтбора.Использование = Истина;
	// + условие ЦенаЗаявки > МинимальнаяЦена
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Данные.ЦенаЗаявки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Данные.МинимальнаяЦена");
	ЭлементОтбора.Использование = Истина;
	// + условие МинимальнаяЦена <> 0
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Данные.МинимальнаяЦена");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.Использование = Истина;
	// + оформляемое поле
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДанныеЦенаЗаявки");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	ЭлементУО.Использование = Истина;
	// №2
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	// + условие РасчетнаяДоходность < ПлановаяДоходность
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Данные.РасчетнаяДоходность");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Данные.ПлановаяДоходность");
	ЭлементОтбора.Использование = Истина;
	// + оформляемое поле
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДанныеРасчетнаяДоходность");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	ЭлементУО.Использование = Истина;
	// условное оформление }}
	
	// разрешение редактирования для колонок таблицы Данные
	РазрешеноРедактировать = Новый Соответствие;
	РазрешеноРедактировать.Вставить(Элементы.ДанныеЦенаЗаявки, Истина);
	РазрешеноРедактировать.Вставить(Элементы.ДанныеКоличествоЗаявки, Истина);
	РазрешеноРедактировать.Вставить(Элементы.ДанныеПлановаяДоходность, Истина);
	Для Каждого ТекЭлемент Из ПолучитьВсеПодчиненныеЭлементы(Элементы.Данные) Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ПолеФормы") Тогда
			Если РазрешеноРедактировать.Получить(ТекЭлемент) = Истина Тогда
				ТекЭлемент.ЦветФона = WebЦвета.БледноЗеленый;
			Иначе
				ТекЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	// возможность открытия номенклатуры
	ТекЭлемент = Элементы.ДанныеСсылка;
	ТекЭлемент.ТолькоПросмотр = Ложь;
	ТекЭлемент.КнопкаОткрытия = Истина;
	ТекЭлемент.КнопкаВыпадающегоСписка = Ложь;
	ТекЭлемент.КнопкаВыбора = Ложь;
	ТекЭлемент.КнопкаСоздания = Ложь;
	ТекЭлемент.РедактированиеТекста = Ложь;
	ТекЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВсеПодчиненныеЭлементы(Элемент)
	
	Результат = Новый Массив; 
	
	Для Каждого ТекЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Результат.Добавить(ТекЭлемент);
		ТипЭлемента = ТипЗнч(ТекЭлемент);
		Если ТипЭлемента = Тип("ГруппаФормы")
			Или ТипЭлемента = Тип("ТаблицаФормы") Тогда
			Для Каждого ТекПодЭлемент Из ТекЭлемент.ПодчиненныеЭлементы Цикл
				Результат.Добавить(ТекПодЭлемент);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеНаСервере()
	
	ДатаОкончанияАнализаТоргов = ДатаЗаявок;
	ДатаНачалаАнализаТоргов = ДатаОкончанияАнализаТоргов - КолвоДнейДляАнализаТоргов * (24*60*60); // за последние N дней
	
	Данные.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Ссылка,
	|	СпрНоменклатура.Код КАК Код,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	СпрНоменклатура.ИдентификаторРежимаТоргов КАК ИдентификаторРежимаТоргов,
	|	СпрНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	СпрНоменклатура.НомерГосРегистрации КАК НомерГосРегистрации,
	|	СпрНоменклатура.ДатаНачалаТоргов КАК ДатаНачалаТоргов,
	|	СпрНоменклатура.ДатаПогашения КАК ДатаПогашения,
	|	СпрНоменклатура.ПервоначальнаяНоминальнаяСтоимость КАК ПервоначальнаяНоминальнаяСтоимость,
	|	СпрНоменклатура.ВалютаНоминала КАК ВалютаНоминала,
	|	СпрНоменклатура.ОбъемВыпуска КАК ОбъемВыпуска,
	|	СпрНоменклатура.НоминальнаяСтоимость КАК НоминальнаяСтоимость,
	|	СпрНоменклатура.ДляКвалифицированныхИнвесторов КАК ДляКвалифицированныхИнвесторов,
	|	СпрНоменклатура.ПериодичностьВыплатыКупона КАК ПериодичностьВыплатыКупона,
	|	СпрНоменклатура.СтавкаКупона КАК СтавкаКупона,
	|	СпрНоменклатура.Категория КАК Категория,
	|	СпрНоменклатура.СтавкаНалогаНаКупонныйДоход КАК СтавкаНалогаНаКупонныйДоход,
	|	СпрНоменклатура.СтавкаНалогаНаПриростКапитала КАК СтавкаНалогаНаПриростКапитала,
	|	СпрНоменклатура.Купоны.(
	|		ДатаНачалаПериода КАК ДатаНачалаПериода,
	|		ДатаВыплаты КАК ДатаВыплаты,
	|		Ставка КАК Ставка,
	|		Сумма КАК Сумма
	|	) КАК Купоны,
	|	СпрНоменклатура.Погашения.(
	|		ДатаПогашения КАК ДатаПогашения,
	|		Сумма КАК Сумма
	|	) КАК Погашения,
	|	ЕСТЬNULL(Надбавки.Надбавка, 0) КАК Надбавка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Надбавки КАК Надбавки
	|		ПО СпрНоменклатура.Ссылка = Надбавки.Номенклатура
	|ГДЕ
	|	НЕ СпрНоменклатура.ПометкаУдаления
	|	И СпрНоменклатура.ДатаНачалаТоргов <= &ДатаЗаявок
	|	И СпрНоменклатура.ДатаПогашения > &ДатаЗаявок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПогашения";
	Запрос.УстановитьПараметр("ДатаЗаявок", ДатаЗаявок);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Данные.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ДоПогашения = ОбщегоНазначенияКлиентСервер.РазницаВДнях(ДатаЗаявок, НоваяСтрока.ДатаПогашения);
		// купоны
		Купоны = Выборка.Купоны.Выгрузить();
		КолвоСтрок = Купоны.Количество();
		Для ОбратныйИндекс = 1 По КолвоСтрок Цикл
			СтрокаТаблицы = Купоны[КолвоСтрок - ОбратныйИндекс];
			Если СтрокаТаблицы.ДатаВыплаты < ДатаСделок Тогда 
				Купоны.Удалить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла;
		Купоны.Сортировать("ДатаВыплаты");
		Если Купоны.Количество() > 0 Тогда
			БлижайшийКупон = Купоны[0];
			НоваяСтрока.РазмерБлижайшегоКупона	= БлижайшийКупон.Сумма;
			НоваяСтрока.ДатаБлижайшегоКупона	= БлижайшийКупон.ДатаВыплаты;
			НоваяСтрока.НКД 					= БлижайшийКупон.Сумма / ОбщегоНазначенияКлиентСервер.РазницаВДнях(БлижайшийКупон.ДатаНачалаПериода, БлижайшийКупон.ДатаВыплаты) * ОбщегоНазначенияКлиентСервер.РазницаВДнях(БлижайшийКупон.ДатаНачалаПериода, ДатаСделок);
			НоваяСтрока.ДоБлижайшегоКупона		= ОбщегоНазначенияКлиентСервер.РазницаВДнях(ДатаЗаявок, БлижайшийКупон.ДатаВыплаты);
		КонецЕсли;
		НоваяСтрока.СуммаОставшихсяКупонов = Купоны.Итог("Сумма");
		
		// плановая доходность
		НайденныеСтроки = ПлановыеДоходности.НайтиСтроки(Новый Структура("Категория", НоваяСтрока.Категория));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.ПлановаяДоходность = НайденныеСтроки[0].ПлановаяДоходность + Выборка.Надбавка;
			Если НоваяСтрока.ДоПогашения >= ПовышеннаяДлительностьДней Тогда
				НоваяСтрока.ПлановаяДоходность = НоваяСтрока.ПлановаяДоходность + НайденныеСтроки[0].НадбавкаЗаПовышеннуюДлительность;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПлановаяДоходность) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Плановая доходность для бумаги " + НоваяСтрока.Код + ") равна нулю!",, "Данные[" + Формат(Данные.Индекс(НоваяСтрока), "ЧГ=") + "].Код");
			КонецЕсли; 
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить плановую доходность для Категории " + НоваяСтрока.Категория + " (бумага " + НоваяСтрока.Код + ")",, "Данные[" + Формат(Данные.Индекс(НоваяСтрока), "ЧГ=") + "].Код");
		КонецЕсли;
		
		Если КолвоДнейДляАнализаТоргов > 0 Тогда
			// данные по торгам
			ТаблицаТоргов = ПолучениеДанныхМосбиржиСервер.ПолучитьИсториюТорговПоОблигации(
								НоваяСтрока.Код, 
								НоваяСтрока.ИдентификаторРежимаТоргов, 
								ДатаНачалаАнализаТоргов, 
								ДатаОкончанияАнализаТоргов);
			КоличествоСтрок = ТаблицаТоргов.Количество();
			Если КоличествоСтрок > 0 Тогда
				МинЦена = Неопределено;
				МаксЦена = Неопределено;
				Объем = 0;
				ОбъемШт = 0;
				КолвоСделок = 0;
				КолвоДней = 0;
				Для Каждого СтрокаТаблицы Из ТаблицаТоргов Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы.Минимум) Тогда
						МинЦена = ?(МинЦена = Неопределено, СтрокаТаблицы.Минимум, Мин(МинЦена, СтрокаТаблицы.Минимум));
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаТаблицы.Максимум) Тогда
						МаксЦена = ?(МаксЦена = Неопределено, СтрокаТаблицы.Максимум, Макс(МаксЦена, СтрокаТаблицы.Максимум));
					КонецЕсли; 
					Объем = Объем + СтрокаТаблицы.Объем;
					ОбъемШт = ОбъемШт + СтрокаТаблицы.ОбъемШт;
					КолвоСделок = КолвоСделок + СтрокаТаблицы.КоличествоСделок;
					КолвоДней = КолвоДней + 1; 
				КонецЦикла;
				НоваяСтрока.МинимальнаяЦена = МинЦена;
				НоваяСтрока.МаксимальнаяЦена = МаксЦена;
				НоваяСтрока.ЦенаЗакрытия = ТаблицаТоргов[КоличествоСтрок - 1].Закрытие;
				НоваяСтрока.ДатаПоследнейСделки = ТаблицаТоргов[КоличествоСтрок - 1].ДатаПоследнейСделки;
				НоваяСтрока.СреднийОбъем = Объем / КолвоДней;
				НоваяСтрока.СреднийОбъемШт = ОбъемШт / КолвоДней;
				НоваяСтрока.СреднееКоличествоСделок = КолвоСделок / КолвоДней;
				
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуИКоличествоЗаявкиВСтроке(СтрокаТаблицыДанных) 
	
	// Формула расчёт доходности:
	//
	//              Доходы - Расходы       365
	// Доходность = ---------------- * ----------- * 100%
	//                   Расходы       ДоПогашения
	// где:
	//     Расходы = ЦенаПокупки + НКД + КомиссияБрокера   (на самом деле ещё плюс налог на прирост капитала)
	//     Доходы  = ЦенаПродажи + (1 - СтавкаНалогаНаКупонныйДоход/100) * СуммаКупонов
	//
	// Посчитаем Доходы с учётом того, что ЦенаПродажи = НоминальнаяСтоимость (т.е. мы держим до погашения и облигация погашается по номиналу):
	Доходы  = СтрокаТаблицыДанных.НоминальнаяСтоимость + (1 - СтрокаТаблицыДанных.СтавкаНалогаНаКупонныйДоход/100) * СтрокаТаблицыДанных.СуммаОставшихсяКупонов;
	// Немного преобразуем исходную формулу Доходности:
	//
	// Доходность = (Доходы / Расходы - 1) * (365 / ДоПогашения) * 100
	//
	// отсюда:
	// Доходы / Расходы = ((Доходность / 100) / (365 / ДоПогашения)) + 1
	//
	// обозначим правую часть уравнения как "Z":
	Z = ((СтрокаТаблицыДанных.ПлановаяДоходность / 100) / (365 / СтрокаТаблицыДанных.ДоПогашения)) + 1;
	//
	// тогда:
	// Расходы = Доходы / Z
	//
	// Напишем вместо "Расходы" составляющие расходов, с учётом того, что КомиссияБрокера = ЦенаПокупки * КомиссияБрокераПроцент/100 :
	// ЦенаПокупки + НКД + ЦенаПокупки * КомиссияБрокераПроцент/100 = Доходы / Z 
	// или:
	// (1 + КомиссияБрокераПроцент/100) * ЦенаПокупки = (Доходы / Z) - НКД
	// 
	// отсюда:
	ЦенаПокупки = ((Доходы / Z) - СтрокаТаблицыДанных.НКД) / (1 + КомиссияБрокераПроцент/100);
	
	// если Цена покупки меньше номинала, то вычтем НДФЛ (на самом деле при этом изменится и сумма налога, но в первом приближении нас устроит такая точность)
	Если ЗначениеЗаполнено(СтрокаТаблицыДанных.СтавкаНалогаНаПриростКапитала) Тогда
		Если ЦенаПокупки < СтрокаТаблицыДанных.НоминальнаяСтоимость Тогда
			ЦенаПокупки = ЦенаПокупки - (СтрокаТаблицыДанных.НоминальнаяСтоимость - ЦенаПокупки) * СтрокаТаблицыДанных.СтавкаНалогаНаПриростКапитала/100;
		КонецЕсли;
	КонецЕсли; 
	
	ЦенаЗаявкиВПроцентах = ЦенаПокупки / СтрокаТаблицыДанных.НоминальнаяСтоимость * 100; // в %-тах от номинала
	СтрокаТаблицыДанных.ЦенаЗаявки = Цел(ЦенаЗаявкиВПроцентах * 100) / 100; // отброс дробной части начиная с 3-го знака после запятой
	СтрокаТаблицыДанных.КоличествоЗаявки = Окр(СуммаЛимитНаОднуБумагу / ЦенаПокупки);
	
	РассчитатьРасчетнуюДоходностьВСтроке(СтрокаТаблицыДанных);
	
	// если из-за налогообложения прироста капитала не попали в плановую доходность, 
	// то пока не придумал ничего лучше, чем итеративно подгонять путём постепенного уменьшения цены заявки
	// пока расчетная доходность не станет больше или равна плановой
	Если ИтеративныйПодгонПодПлановуюДоходность Тогда
		Для Сч = 1 По 1000 Цикл
			Если СтрокаТаблицыДанных.РасчетнаяДоходность >= СтрокаТаблицыДанных.ПлановаяДоходность Тогда
				Прервать;
			КонецЕсли;
			СтрокаТаблицыДанных.ЦенаЗаявки = СтрокаТаблицыДанных.ЦенаЗаявки - 0.01;
			РассчитатьРасчетнуюДоходностьВСтроке(СтрокаТаблицыДанных);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура РассчитатьСуммыИКоличестваЗаявок()
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		РассчитатьСуммуИКоличествоЗаявкиВСтроке(СтрокаТаблицы);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРасчетнуюДоходностьВСтроке(СтрокаТаблицыДанных) 

	ЦенаПокупки = СтрокаТаблицыДанных.НоминальнаяСтоимость * СтрокаТаблицыДанных.ЦенаЗаявки / 100;
	
	Доходы  = СтрокаТаблицыДанных.НоминальнаяСтоимость + (1 - СтрокаТаблицыДанных.СтавкаНалогаНаКупонныйДоход/100) * СтрокаТаблицыДанных.СуммаОставшихсяКупонов;
	
	НалогНаПриростКапитала = Макс(0, (СтрокаТаблицыДанных.НоминальнаяСтоимость - ЦенаПокупки) * СтрокаТаблицыДанных.СтавкаНалогаНаПриростКапитала/100);
	Расходы = (1 + КомиссияБрокераПроцент/100) * ЦенаПокупки + СтрокаТаблицыДанных.НКД + НалогНаПриростКапитала;
	
	СтрокаТаблицыДанных.РасчетнаяДоходность = (Доходы / Расходы - 1) * 365 / СтрокаТаблицыДанных.ДоПогашения * 100;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанные(Команда)
	
	Если Данные.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьДанныеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Таблица с данными будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Отмена);
	Иначе 
		ЗаполнитьДанныеПродолжение();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеПродолжение();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПродолжение()
	
	ЗаполнитьДанныеНаСервере();
	РассчитатьСуммыИКоличестваЗаявок();
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаРезультат;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДатуСделок()
	
	Сутки =  24 * 60 * 60;
	ДатаСделок = ДатаЗаявок + (ТоргиВРежимеТПлюс * Сутки); // Т+
	ДеньНеделиДатыСделок = ДеньНедели(ДатаСделок);
	Если ДеньНеделиДатыСделок >=6 Тогда
		// суббота или воскресенье
		ДатаСделок = ДатаСделок + ((8 - ДеньНеделиДатыСделок) * Сутки); // на ближайший понедельник
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаявокПриИзменении(Элемент)
	
	РассчитатьДатуСделок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоргиВРежимеТПлюсПриИзменении(Элемент)
	
	РассчитатьДатуСделок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РассчитатьДатуСделок();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаявки(Команда)
	
	Сутки = 24 * 60 * 60;
	
	ФорматЦены			= "ЧРД=.; ЧГ=";
	ФорматКоличества	= "ЧРД=.; ЧГ=";
	ФорматДаты			= "ДФ=yyyyMMdd";
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
	
	ИдТранзакции = НачЗначTransID;
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		
		КодБумаги = СтрокаТаблицы.Код;
		Если НЕ ЗначениеЗаполнено(КодБумаги) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана код бумаги в строке данных!",, "Данные[" + Формат(Данные.Индекс(СтрокаТаблицы), "ЧГ=") + "].Код");
			Продолжить;
		КонецЕсли; 
		ЦенаЗаявки	= СтрокаТаблицы.ЦенаЗаявки;
		Если НЕ ЗначениеЗаполнено(ЦенаЗаявки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана цена для бумаги " + КодБумаги,, "Данные[" + Формат(Данные.Индекс(СтрокаТаблицы), "ЧГ=") + "].ЦенаЗаявки");
			Продолжить;
		КонецЕсли; 
		КолвоЗаявки	= СтрокаТаблицы.КоличествоЗаявки;
		Если НЕ ЗначениеЗаполнено(КолвоЗаявки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано количество для бумаги " + КодБумаги,, "Данные[" + Формат(Данные.Индекс(СтрокаТаблицы), "ЧГ=") + "].КоличествоЗаявки");
			Продолжить;
		КонецЕсли; 
		КодКласса	= СтрокаТаблицы.ИдентификаторРежимаТоргов;
		ДатаОкончанияСрока = Мин(СрокДействияЗаявки, СтрокаТаблицы.ДатаПогашения - (ТоргиВРежимеТПлюс * Сутки));
		
		Стр = "TRANS_ID="		+ Формат(ИдТранзакции, "ЧГ=") + ";"
			+ "ACCOUNT="		+ Счет + ";"
			+ "CLIENT_CODE="	+ КодКлиента + ";"
			+ "CLASSCODE="		+ КодКласса + ";"
			+ "SECCODE="		+ КодБумаги + ";"
			+ "OPERATION="		+ "B" + ";"	// buy
			+ "QUANTITY="		+ Формат(КолвоЗаявки, ФорматКоличества) + ";"
		;
		
		Если ВидЗаявки = "Лимитированная" Тогда
			Стр = Стр	
				+ "ACTION="					+ "NEW_ORDER" + ";"
				+ "TYPE="					+ "L" + ";"	// limit
				+ "PRICE="					+ Формат(ЦенаЗаявки, ФорматЦены) + ";"
			;
			
		ИначеЕсли ВидЗаявки = "Тэйк-профит" Тогда
			
			Стр = Стр
				+ "ACTION="					+ "NEW_STOP_ORDER" + ";"
				+ "STOP_ORDER_KIND="		+ "TAKE_PROFIT_STOP_ORDER" + ";"
				+ "STOPPRICE="				+ Формат(ЦенаЗаявки, ФорматЦены) + ";"
				+ "OFFSET="					+ Формат(ОтступПроц, ФорматЦены) + ";"
				+ "OFFSET_UNITS="			+ "PERCENTS" + ";"
				+ "SPREAD="					+ Формат(ЗащитныйСпрэдПроц, ФорматЦены) + ";"
				+ "SPREAD_UNITS="			+ "PERCENTS" + ";"
			;
			Если ЗначениеЗаполнено(ДатаОкончанияСрока) Тогда
				Стр = Стр
				+ "EXPIRY_DATE="			+ Формат(ДатаОкончанияСрока, ФорматДаты) + ";"
			КонецЕсли; 
			
		ИначеЕсли ВидЗаявки = "Стоп-цена по другой бумаге" Тогда
			
			Стр = Стр
				+ "ACTION="					+ "NEW_STOP_ORDER" + ";"
				+ "STOP_ORDER_KIND="		+ "CONDITION_PRICE_BY_OTHER_SEC" + ";"
				+ "STOPPRICE_CLASSCODE="	+ КодКласса + ";"
				+ "STOPPRICE_SECCODE="		+ КодБумаги + ";"
				+ "STOPPRICE_CONDITION="	+ "<=" + ";"
				+ "STOPPRICE="				+ Формат(ЦенаЗаявки, ФорматЦены) + ";"
				+ "PRICE="					+ Формат(ЦенаЗаявки, ФорматЦены) + ";"
			;
			Если ЗначениеЗаполнено(ДатаОкончанияСрока) Тогда
				Стр = Стр
				+ "EXPIRY_DATE="			+ Формат(ДатаОкончанияСрока, ФорматДаты) + ";"
			КонецЕсли; 
			
		КонецЕсли; 
		
		ЗаписьТекста.ЗаписатьСтроку(Стр);
		
		ИдТранзакции = ИдТранзакции + 1;
		
	КонецЦикла; 
	
	ЗаписьТекста.Закрыть();
	
	НачЗначTransID = ИдТранзакции;
	
	ПоказатьОповещениеПользователя("Выгрузка заявок завершена!");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогВыбораФайла.Фильтр = "Файлы заявок для импорта в QUIK (*.tri)|*.tri|Все файлы (*.*)|*.*";
	ДополнительныеПараметры = Новый Структура; 
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ИмяФайла = ВыбранныеФайлы[0];
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияБрокераПроцентПриИзменении(Элемент)
	
	СпроситьПересчитатьСуммыИКоличестваЗаявок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановыеДоходностиПриИзменении(Элемент)
	
	// СпроситьПересчитатьСуммыИКоличестваЗаявок();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЛимитНаОднуБумагуПриИзменении(Элемент)
	
	СпроситьПересчитатьСуммыИКоличестваЗаявок();
	
КонецПроцедуры
 
&НаКлиенте
Процедура СпроситьПересчитатьСуммыИКоличестваЗаявок() 
	
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПересчитатьСуммыИКоличестваЗаявокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, "Пересчитать суммы и количества заявок?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Отмена);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВопросПересчитатьСуммыИКоличестваЗаявокЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитатьСуммыИКоличестваЗаявок();
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыИКоличестваЗаявок(Команда)
	
	СпроситьПересчитатьСуммыИКоличестваЗаявок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЦенаЗаявкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Данные.ТекущиеДанные;
	РассчитатьРасчетнуюДоходностьВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПлановаяДоходностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Данные.ТекущиеДанные;
	РассчитатьСуммуИКоличествоЗаявкиВСтроке(ТекущиеДанные);
	
КонецПроцедуры


&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ТЗ = Настройки.Получить("ПлановыеДоходности");
	Если ТЗ <> Неопределено И ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Категория Из Перечисления.КатегорииОблигаций Цикл
			Если ТЗ.Найти(Категория, "Категория") = Неопределено Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.Категория = Категория;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры
 