
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// значения по умолчанию
	ДатаЗаявок = ТекущаяДатаСеанса();
	ТоргиВРежимеТПлюс = 1; // Т+1
	КомиссияБрокераПроцент = 0.06; // %
	КолвоДнейДляАнализаТоргов = 7;
	НачЗначTransID = День(ДатаЗаявок) * 1000 + 1;
	СуммаЛимитНаОднуБумагу = 5000;
	ОтступПроц = 0.1;
	ЗащитныйСпрэдПроц = 0.1;
	//СрокДействияЗаявки = КонецМесяца(ДатаЗаявок);
	ВидЗаявки = "Лимитированная";
	Для Каждого Категория Из Перечисления.КатегорииОблигаций Цикл
		НоваяСтрока = ПлановыеДоходности.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.ПлановаяДоходность = 5; // %
	КонецЦикла; 
		
	// {{ условное оформление
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ГруппаОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаОтбора.Использование = Истина;
	// + условие ЦенаЗаявки > МинимальнаяЦена
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Данные.ЦенаЗаявки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Данные.МинимальнаяЦена");
	ЭлементОтбора.Использование = Истина;
	// + условие МинимальнаяЦена <> 0
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Данные.МинимальнаяЦена");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.Использование = Истина;
	// + оформляемое поле
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДанныеЦенаЗаявки");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	ЭлементУО.Использование = Истина;
	// условное оформление }}
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНаСервере()
	
	ДатаОкончанияАнализаТоргов = ДатаЗаявок;
	ДатаНачалаАнализаТоргов = ДатаОкончанияАнализаТоргов - КолвоДнейДляАнализаТоргов * (24*60*60); // за последние N дней
	
	Данные.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.ИдентификаторРежимаТоргов КАК ИдентификаторРежимаТоргов,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.НомерГосРегистрации КАК НомерГосРегистрации,
	|	Номенклатура.ДатаНачалаТоргов КАК ДатаНачалаТоргов,
	|	Номенклатура.ДатаПогашения КАК ДатаПогашения,
	|	Номенклатура.ПервоначальнаяНоминальнаяСтоимость КАК ПервоначальнаяНоминальнаяСтоимость,
	|	Номенклатура.ВалютаНоминала КАК ВалютаНоминала,
	|	Номенклатура.ОбъемВыпуска КАК ОбъемВыпуска,
	|	Номенклатура.НоминальнаяСтоимость КАК НоминальнаяСтоимость,
	|	Номенклатура.ДляКвалифицированныхИнвесторов КАК ДляКвалифицированныхИнвесторов,
	|	Номенклатура.ПериодичностьВыплатыКупона КАК ПериодичностьВыплатыКупона,
	|	Номенклатура.СтавкаКупона КАК СтавкаКупона,
	|	Номенклатура.Категория КАК Категория,
	|	Номенклатура.СтавкаНалогаНаКупонныйДоход КАК СтавкаНалогаНаКупонныйДоход,
	|	Номенклатура.СтавкаНалогаНаПриростКапитала КАК СтавкаНалогаНаПриростКапитала,
	|	Номенклатура.Купоны.(
	|		ДатаНачалаПериода КАК ДатаНачалаПериода,
	|		ДатаВыплаты КАК ДатаВыплаты,
	|		Ставка КАК Ставка,
	|		Сумма КАК Сумма
	|	) КАК Купоны,
	|	Номенклатура.Погашения.(
	|		ДатаПогашения КАК ДатаПогашения,
	|		Сумма КАК Сумма
	|	) КАК Погашения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ДатаНачалаТоргов <= &ДатаЗаявок
	|	И Номенклатура.ДатаПогашения > &ДатаЗаявок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПогашения";
	Запрос.УстановитьПараметр("ДатаЗаявок", ДатаЗаявок);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Данные.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ДоПогашения = ОбщегоНазначенияКлиентСервер.РазницаВДнях(ДатаЗаявок, НоваяСтрока.ДатаПогашения);
		// купоны
		Купоны = Выборка.Купоны.Выгрузить();
		КолвоСтрок = Купоны.Количество();
		Для ОбратныйИндекс = 1 По КолвоСтрок Цикл
			СтрокаТаблицы = Купоны[КолвоСтрок - ОбратныйИндекс];
			Если СтрокаТаблицы.ДатаВыплаты < ДатаСделок Тогда 
				Купоны.Удалить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла;
		Купоны.Сортировать("ДатаВыплаты");
		Если Купоны.Количество() > 0 Тогда
			БлижайшийКупон = Купоны[0];
			НоваяСтрока.РазмерБлижайшегоКупона	= БлижайшийКупон.Сумма;
			НоваяСтрока.ДатаБлижайшегоКупона	= БлижайшийКупон.ДатаВыплаты;
			НоваяСтрока.НКД 					= БлижайшийКупон.Сумма / ОбщегоНазначенияКлиентСервер.РазницаВДнях(БлижайшийКупон.ДатаНачалаПериода, БлижайшийКупон.ДатаВыплаты) * ОбщегоНазначенияКлиентСервер.РазницаВДнях(БлижайшийКупон.ДатаНачалаПериода, ДатаСделок);
			НоваяСтрока.ДоБлижайшегоКупона		= ОбщегоНазначенияКлиентСервер.РазницаВДнях(ДатаЗаявок, БлижайшийКупон.ДатаВыплаты);
		КонецЕсли;
		НоваяСтрока.СуммаОставшихсяКупонов = Купоны.Итог("Сумма");
				
		// данные по торгам
		ТаблицаТоргов = ПолучениеДанныхМосбиржиСервер.ПолучитьИсториюТорговПоОблигации(
							НоваяСтрока.Код, 
							НоваяСтрока.ИдентификаторРежимаТоргов, 
							ДатаНачалаАнализаТоргов, 
							ДатаОкончанияАнализаТоргов);
		КоличествоСтрок = ТаблицаТоргов.Количество();
		Если КоличествоСтрок > 0 Тогда
			МинЦена = Неопределено;
			МаксЦена = Неопределено;
			Объем = 0;
			ОбъемШт = 0;
			КолвоСделок = 0;
			КолвоДней = 0;
			Для Каждого СтрокаТаблицы Из ТаблицаТоргов Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.Минимум) Тогда
					МинЦена = ?(МинЦена = Неопределено, СтрокаТаблицы.Минимум, Мин(МинЦена, СтрокаТаблицы.Минимум));
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.Максимум) Тогда
					МаксЦена = ?(МаксЦена = Неопределено, СтрокаТаблицы.Максимум, Макс(МаксЦена, СтрокаТаблицы.Максимум));
				КонецЕсли; 
				Объем = Объем + СтрокаТаблицы.Объем;
				ОбъемШт = ОбъемШт + СтрокаТаблицы.ОбъемШт;
				КолвоСделок = КолвоСделок + СтрокаТаблицы.КоличествоСделок;
				КолвоДней = КолвоДней + 1; 
			КонецЦикла;
			НоваяСтрока.МинимальнаяЦена = МинЦена;
			НоваяСтрока.МаксимальнаяЦена = МаксЦена;
			НоваяСтрока.ЦенаЗакрытия = ТаблицаТоргов[КоличествоСтрок - 1].Закрытие;
			НоваяСтрока.ДатаПоследнейСделки = ТаблицаТоргов[КоличествоСтрок - 1].ДатаПоследнейСделки;
			НоваяСтрока.СреднийОбъем = Объем / КолвоДней;
			НоваяСтрока.СреднийОбъемШт = ОбъемШт / КолвоДней;
			НоваяСтрока.СреднееКоличествоСделок = КолвоСделок / КолвоДней;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

//
&НаКлиенте
Процедура РассчитатьСуммуИКоличествоЗаявкиВСтроке(СтрокаТаблицыДанных) 
		
	НайденныеСтроки = ПлановыеДоходности.НайтиСтроки(Новый Структура("Категория", СтрокаТаблицыДанных.Категория));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить плановую доходность для Категории " + СтрокаТаблицыДанных.Категория + " (бумага " + СтрокаТаблицыДанных.Код + ")",, "Данные[" + Формат(Данные.Индекс(СтрокаТаблицыДанных), "ЧГ=") + "].Код");
		Возврат;
	КонецЕсли;
	
	Доходность = НайденныеСтроки[0].ПлановаяДоходность / 100;
	КомиссияБрокера = КомиссияБрокераПроцент / 100;
	
	// Доходность = (Доходы - Расходы) / Расходы * 365 / ДоПогашения
	// - или
	// Доходность / 365 * ДоПогашения = Доходы / Расходы - 1
	// - пусть ДоходностьШтрих = Доходность / 365 * ДоПогашения
	ДоходностьШтрих = Доходность / 365 * СтрокаТаблицыДанных.ДоПогашения;
	// - тогда 
	// ДоходностьШтрих = Доходы / Расходы - 1
	// - т.е.
	// ДоходностьШтрих + 1 = Доходы / Расходы
	// -- или
	// Расходы = Доходы / (ДоходностьШтрих + 1)
	// - при этом
	// Доходы = Номинал + ЧистыйКупон
	Доходы = СтрокаТаблицыДанных.НоминальнаяСтоимость + СтрокаТаблицыДанных.СуммаОставшихсяКупонов * (1 - СтрокаТаблицыДанных.СтавкаНалогаНаКупонныйДоход / 100);
	// - а
	// Расходы = Цена + НКД + (КомиссияБрокера * Цена)
	// - значит
	// (1 + КомиссияБрокера) * Цена + НКД = Доходы / (ДоходностьШтрих + 1)
	// - откуда
	// Цена = (Доходы / (ДоходностьШтрих + 1) - НКД) / (1 + КомиссияБрокера);
	Цена = (Доходы / (ДоходностьШтрих + 1) - СтрокаТаблицыДанных.НКД) / (1 + КомиссияБрокера);
	
	// если Цена меньше номинала, то вычтем НДФЛ (на самом деле при этом изменится и сумма налога, но в первом приближении нас устроит такая точность)
	Если Цена < СтрокаТаблицыДанных.НоминальнаяСтоимость Тогда
		Цена = Цена - (СтрокаТаблицыДанных.НоминальнаяСтоимость - Цена) * СтрокаТаблицыДанных.СтавкаНалогаНаПриростКапитала / 100;
	КонецЕсли; 
	
	СтрокаТаблицыДанных.КоличествоЗаявки = Окр(СуммаЛимитНаОднуБумагу / Цена);
	СтрокаТаблицыДанных.ЦенаЗаявки = Цена / СтрокаТаблицыДанных.НоминальнаяСтоимость * 100; // в %-тах от номинала
	
КонецПроцедуры
 
&НаКлиенте
Процедура РассчитатьСуммыИКоличестваЗаявок()
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		РассчитатьСуммуИКоличествоЗаявкиВСтроке(СтрокаТаблицы);
	КонецЦикла; 
	
КонецПроцедуры
 

&НаКлиенте
Процедура ЗаполнитьДанные(Команда)
	
	Если Данные.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьДанныеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Таблица с данными будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Отмена);
	Иначе 
		ЗаполнитьДанныеПродолжение();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеПродолжение();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПродолжение()
	
	ЗаполнитьДанныеНаСервере();
	РассчитатьСуммыИКоличестваЗаявок();
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаРезультат;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДатуСделок()
	
	Сутки =  24 * 60 * 60;
	ДатаСделок = ДатаЗаявок + (ТоргиВРежимеТПлюс * Сутки); // Т+
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаявокПриИзменении(Элемент)
	
	РассчитатьДатуСделок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоргиВРежимеТПлюсПриИзменении(Элемент)
	
	РассчитатьДатуСделок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РассчитатьДатуСделок();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаявки(Команда)
	
	Сутки = 24 * 60 * 60;
	
	ФорматЦены			= "ЧРД=.; ЧГ=";
	ФорматКоличества	= "ЧРД=.; ЧГ=";
	ФорматДаты			= "ДФ=yyyyMMdd";
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	
	ИдТранзакции = НачЗначTransID;
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		
		ЦенаЗаявки	= СтрокаТаблицы.ЦенаЗаявки;
		Если НЕ ЗначениеЗаполнено(ЦенаЗаявки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана цена для бумаги " + СтрокаТаблицы.Код,, "Данные[" + Формат(Данные.Индекс(СтрокаТаблицы), "ЧГ=") + "].Код");
			Продолжить;
		КонецЕсли; 
		КолвоЗаявки	= СтрокаТаблицы.КоличествоЗаявки;
		Если НЕ ЗначениеЗаполнено(ЦенаЗаявки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано количество для бумаги " + СтрокаТаблицы.Код,, "Данные[" + Формат(Данные.Индекс(СтрокаТаблицы), "ЧГ=") + "].Код");
			Продолжить;
		КонецЕсли; 
		КодКласса	= СтрокаТаблицы.ИдентификаторРежимаТоргов;
		ДатаДо = Мин(СрокДействияЗаявки, СтрокаТаблицы.ДатаПогашения - (ТоргиВРежимеТПлюс * Сутки));
		
		Стр = "TRANS_ID="		+ Формат(ИдТранзакции, "ЧГ=") + ";"
			+ "ACCOUNT="		+ Счет + ";"
			+ "CLIENT_CODE="	+ КодКлиента + ";"
			+ "CLASSCODE="		+ КодКласса + ";"
			+ "SECCODE="		+ СтрокаТаблицы.Код + ";"
			+ "OPERATION="		+ "B" + ";"	// buy
			+ "QUANTITY="		+ Формат(КолвоЗаявки, ФорматКоличества) + ";"
		;
		
		Если ВидЗаявки = "Лимитированная" Тогда
			Стр = Стр	
				+ "ACTION="					+ "NEW_ORDER" + ";"
				+ "TYPE="					+ "L" + ";"	// limit
				+ "PRICE="					+ Формат(ЦенаЗаявки, ФорматЦены) + ";"
			;
			
		ИначеЕсли ВидЗаявки = "Тэйк-профит" Тогда
			
			Стр = Стр
				+ "ACTION="					+ "NEW_STOP_ORDER" + ";"
				+ "STOP_ORDER_KIND="		+ "TAKE_PROFIT_STOP_ORDER" + ";"
				+ "STOPPRICE="				+ Формат(ЦенаЗаявки, ФорматЦены) + ";"
				+ "OFFSET="					+ Формат(ОтступПроц, ФорматЦены) + ";"
				+ "OFFSET_UNITS="			+ "PERCENTS" + ";"
				+ "SPREAD="					+ Формат(ЗащитныйСпрэдПроц, ФорматЦены) + ";"
				+ "SPREAD_UNITS="			+ "PERCENTS" + ";"
			;
			Если ЗначениеЗаполнено(СрокДействияЗаявки) Тогда
				Стр = Стр
				+ "EXPIRY_DATE="			+ Формат(ДатаДо, ФорматДаты) + ";"
			КонецЕсли; 
			
		ИначеЕсли ВидЗаявки = "Стоп-цена по другой бумаге" Тогда
			
			Стр = Стр
				+ "ACTION="					+ "NEW_STOP_ORDER" + ";"
				+ "STOP_ORDER_KIND="		+ "CONDITION_PRICE_BY_OTHER_SEC" + ";"
				+ "STOPPRICE_CLASSCODE="	+ КодКласса + ";"
				+ "STOPPRICE_SECCODE="		+ СтрокаТаблицы.Код + ";"
				+ "STOPPRICE_CONDITION="	+ "<=" + ";"
				+ "STOPPRICE="				+ Формат(ЦенаЗаявки, ФорматЦены) + ";"
				+ "PRICE="					+ Формат(ЦенаЗаявки, ФорматЦены) + ";"
			;
			Если ЗначениеЗаполнено(СрокДействияЗаявки) Тогда
				Стр = Стр
				+ "EXPIRY_DATE="			+ Формат(ДатаДо, ФорматДаты) + ";"
			КонецЕсли; 
			
		КонецЕсли; 
		
		ЗаписьТекста.ЗаписатьСтроку(Стр);
		
		ИдТранзакции = ИдТранзакции + 1;
		
	КонецЦикла; 
	
	ЗаписьТекста.Закрыть();
	
	НачЗначTransID = ИдТранзакции;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогВыбораФайла.Фильтр = "Файлы заявок для импорта в QUIK (*.tri)|*.tri|Все файлы (*.*)|*.*";
	ДополнительныеПараметры = Новый Структура; 
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ИмяФайла = ВыбранныеФайлы[0];
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура КомиссияБрокераПроцентПриИзменении(Элемент)
	
	СпроситьПересчитатьСуммыИКоличестваЗаявок();
	
КонецПроцедуры


&НаКлиенте
Процедура ПлановыеДоходностиПриИзменении(Элемент)
	
	СпроситьПересчитатьСуммыИКоличестваЗаявок();
	
КонецПроцедуры


&НаКлиенте
Процедура СуммаЛимитНаОднуБумагуПриИзменении(Элемент)
	
	СпроситьПересчитатьСуммыИКоличестваЗаявок();
	
КонецПроцедуры
 
&НаКлиенте
Процедура СпроситьПересчитатьСуммыИКоличестваЗаявок() 
	
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПересчитатьСуммыИКоличестваЗаявокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, "Пересчитать суммы и количества заявок?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Отмена);
	
КонецПроцедуры
 
//
&НаКлиенте
Процедура ВопросПересчитатьСуммыИКоличестваЗаявокЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитатьСуммыИКоличестваЗаявок();
	КонецЕсли; 
		
КонецПроцедуры


&НаКлиенте
Процедура ПересчитатьСуммыИКоличестваЗаявок(Команда)
	
	СпроситьПересчитатьСуммыИКоличестваЗаявок();
	
КонецПроцедуры
 